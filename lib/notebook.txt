import 'dart:typed_data';
import 'dart:ui';
import 'package:flutter/foundation.dart';
import 'package:tflite_flutter/tflite_flutter.dart' as tf;
import 'dart:ui' as ui;

import 'assets.dart';

class Classifier {
  Classifier();

  Future<int> classifyDrawing(List<Offset?> points) async {
    final picture = _convertPointsToPicture(points);
    final image = await picture.toImage(28, 28);
    final byteData = await image.toByteData(format: ui.ImageByteFormat.rawRgba);
    final imageAsList = byteData?.buffer.asUint8List();

    if (imageAsList == null) throw Exception("Failed to convert image.");

    return _runModel(imageAsList);
  }

  Future<int> _runModel(Uint8List imageAsList) async {
    List<double> grayscale = _convertToGrayscale(imageAsList);

    // Log the grayscale input
    debugPrint('Grayscale input: $grayscale');

    final input = grayscale.reshape([1, 28, 28, 1]);
    final output = List.filled(10, 0.0).reshape([1, 10]);

    try {
      final interpreter = await tf.Interpreter.fromAsset(Assets.modelPath);
      interpreter.run(input, output);

      // Log the output for debugging
      debugPrint('Model output: ${output[0]}');
    } catch (e) {
      debugPrint('Error running model: $e');
    }

    return _getPredictedDigit(output[0]);
  }



  List<double> _convertToGrayscale(Uint8List imageAsList) {
    List<double> grayscale = List.filled(28 * 28, 0.0, growable: false);
    for (int i = 0, j = 0; i < imageAsList.length; i += 4, j++) {
      final avg = (imageAsList[i] + imageAsList[i + 1] + imageAsList[i + 2]) / 3;
      grayscale[j] = avg / 255.0;
    }
    return grayscale;
  }

  int _getPredictedDigit(List<double> output) {
    int digit = 0;
    double highestProb = 0.0;

    for (int i = 0; i < output.length; i++) {
      if (output[i] > highestProb) {
        highestProb = output[i];
        digit = i;
      }
    }
    return digit ;
  }

  ui.Picture _convertPointsToPicture(List<Offset?> points) {
    final recorder = ui.PictureRecorder();
    final canvas = Canvas(recorder, Rect.fromLTWH(0, 0, 28, 28));
    final paint = Paint()
      ..strokeCap = StrokeCap.round
      ..color = const Color(0xFFFFFFFF)
      ..strokeWidth = 12;

    final bgPaint = Paint()..color = const Color(0xFFFF0000);
    canvas.drawRect(const Rect.fromLTWH(0, 0, 28, 28), bgPaint);


    for (int i = 0; i < points.length - 1; i++) {
      if (points[i] != null && points[i + 1] != null) {
        canvas.drawLine(points[i]!, points[i + 1]!, paint);
      }
    }
    return recorder.endRecording();
  }
}
